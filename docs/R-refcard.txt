#+TITLE:     R quick reference card
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+Time-stamp: <2014-09-11 Thu 11:09>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en

* Notes

- http://www.statmethods.net/index.html

- http://tryr.codeschool.com/

* Commands

- getwd() :: figure out what your working directory is
- read.csv("file.csv") :: read data file, create data frame
- read.table("file.txt") :: read data file, create data frame
- dir() :: list all the *files* in the working directory
- ls() :: show objects in my workspace
- source("file.R") :: load R code file
- library(file) :: load package
- data(dataset) :: load dataset

* Operators

- =<-= :: assign

* Function

#+begin_src R
myfunction <- function(x) {
    y <- norm(100)
    mean(y)
}
#+end_src

- args() :: look at the arguments of a function

** General

- mean() :: take the mean
- median() :: take the median
- range() :: give the min and the max (vector of length 2) of the observations
             (vector of numbers)
- length() ::
- x:y :: create an *sequence of* integers from x to y (x < y or x > y)
- seq(from, to, len) :: create a *sequence of* =len= equally spaced fractional
     numbers
- cor() :: correlation function
- vector(class, length) :: create an empty vector
- matrix(nrow = x, ncol = y) :: create an empty matrix
- array() :: create an array
- attributes() :: access (set or modify) the (list of) attributes of an object
- print(object) :: explicitly print out an object
- c() :: create vectors of objects (that is, *concatenate* or combine things
         together)
- class() :: show the class of the object
- as.*() :: explicitly coerce from one class to another
  + as.numeric() :: coerce the (=character=) column to be =numeric=
  + as.Date("January 2, 2007", "%B %d, %Y") = "2007-01-02"
  + as.ts() :: Convert to a time series object
- dim() :: give the dimension attribute
- cbind() :: column-bind
- rbind() :: row-bind
- list() :: construct a list (the indexes of the elements of a list have
            double brackets around them)
- factor(character vector) :: create a factor variable (with levels by
     alphabetical order)
- table(vector) :: *count* the number of observations in each level; give a
                   frequency of how many /levels/ (see factors) there are
- unclass(vector) :: strip out the class (see factors)
- is.na() :: test if object is =NA=
- is.nan() :: test if object is =NaN=
- data.matrix() :: convert a data frame to a matrix (forced *coercion*!)
- data.frame() :: create a data frame
- names() :: show or give a name to each *element* of a vector
- dimnames() :: show or give a name to each *row element and* each *column
                element* of a matrix
- complete.cases() :: subset all the missing values
- rep() ::
- str(.Platform) :: what is the operating system
- str(function) :: show arguments
- version :: is the OS 32 or 64-bit
- rm() :: remove objects from your workspace

  #+begin_src R
  rm(list=ls()) # remove everything from the workspace
  #+end_src

- split(dataframe, dataframe$column) ::
- rbinom(1, 1, 0.5) :: generating 1 observation of 1 head flip of a fair *coin* (0.5)
- abs() :: absolute value
- lm(yValues ~ xValues) (in the =stats= package) :: linear regression modeling
     function
- arg(function.default) ::
- paste() :: *concatenate* a set of *strings together* to create one string or a
             vector of strings
- cat() :: concatenate together a set of strings and prints out the
           concatanated string (to a file or to the console)
- gl(n, k, labels = c("Male", "Female")) :: create a factor variable, with =n=
     groups and =k= iterations of each, with names
- nchar() :: get the length of a string
- summary() :: produce a summary of the data frame
- %in% :: membership test

* Getting help

- Google
- [[mailto:r-help@r-project.org][R general mailing list]]
- Stack Overflow

#+begin_src R
?function
?dataset
package ? lattice
library(help = lattice)
#+end_src

* Overview and history of R

- R system that you download from [[http://cran.r-project.org/][CRAN]]:
  + =base= package
  + Familiar packages (=utils=, =datasets=, ...)
  + Recommended packages (=lattice=, ...)
  + 4,000 other packages

- Some R manuals:
  + An introduction to R
  + Writing R extensions
  + R data import/export

* Introduction to the R language: Data types and basic operations

- 5 "atomic" *classes* of objects
  1. =logical= (=TRUE= / =FALSE=)
  2. =integer= (with explicit =L= suffix, such as =1L=)
  3. =numeric= (/real/ numbers, such as =0.5= or =1=)
  4. =complex= (such as =1+0i=)
  5. =character= (such as the string "hello") = *lowest*

- Basic object: *vector*
  + Set of elements of the same class
  + When objects of different classes are mixed in a vector, /coercion/ occurs
    behind the scene so that every element is of the same class (the "lowest
    common denominator" class)
  + *Matrices* are vectors with multiple dimensions (=dimension= attribute)

- Special types of vectors
  + *list* (vector of objects of possibly different classes)
  + *factor* (qualitative variable used to represent /categorical/ data, to store
    self-describing codes for /labels/ such as "male" and "female", or "low",
    "medium" and "high")
    * Unordered or ordered
  + *data frame* (used to store tabular data where each column can be of a
    different class)
    * Row = observation, column = variable
    * Special type of list (of variables in columns) where every element has
      the same length
    * Special attribute =row.names= (every row has a name, or defaults to a
      sequence of integers)
    * Most often created by calling =read.table()= or =read.csv()=

- Special values
  + =Inf= for infinity
  + =NaN= for "Not a Number" (undefined mathematical operation)
  + =NA= for *missing value* (for example, the result of nonsensical coercion)
    * =NA= values have a class
    * A =NaN= value is also =NA= (but the converse is not true)
  + =NULL=???

- Attributes
  + names
  + dimensions
  + class
  + length

- Everything to the right of the # is a comment

- Matrices
  + They are constructed /column-wise/ (vector inserted by column)
  + They can be created from vectors by adding a dimension attribute:
    dim(m) <- c(2,5)
  + They can be created by /column-binding/ or /row-binding/

** Subsetting

- Syntax

  + =[= always return an object (one or more elements) of the *same class* as the
    original (one exception: matrices -- lists are no exception!)
    * Used to extract multiple elements of a list (=x[c(1,3)]=)
    * =dfrm[,-1]= to remove the first column

  + =[[= is used to extract a *single element* of a list or a data frame; its
    class will not necessarily be a list or data frame
    * Can be used with /computed/ indices
    * Can extract nested elements of a list:
    #+begin_src R
     x[[1]][[3]] =  x[[c(1,3)]] # third element of the first element
    #+end_src
    * Partial matching allowed at the command-line: x[["a", exact = FALSE]]
      instead of x[["aardvark"]]

  + =$= is used to extract an element of a list or data frame *by name* (=x$bar= =
    x[["bar"]]): you don't have to remember where the element is in the list
    * Can only be used with literal names
    * Partial matching allowed at the command-line: =x$a= instead of =x$aardvark=

- Subsetting by using 2 types of index:
  + a *numeric* index (=x[2]=, =x[1:4]=)
  + a *logical* index (=x[x > "a"]=)

- Create a logical vector:

  #+begin_src R
  u <- x > "a"
  x[u] # get all elements which are greater than "a"
  #+end_src

- Matrices can be subsetted with =(row, col)= type indices
  + Indices can also be missing:
    * x[i,] :: row i
    * x[,j] :: column j
  + By default, a single element is retrieved as a vector of length 1 rather
    than a 1x1 matrix
  + By default, a single column or a single row is retrieved as a vector, not
    as a matrix
  + Can be turned off by setting =drop = FALSE= (don't drop the dimension)

- Remove missing values (=NA=)

  #+begin_src R
  missing <- is.na(x) # logical vector
  x[!missing]
  #+end_src

- Take the subset of all objects (=x= and =y=) that has no missing values

  #+begin_src R
  bothnonmissing <- complete.cases(x, y) # logical vector
  x[bothnonmissing]
  #+end_src

- Take all the rows of a data frame where *all the values* are not missing

  #+begin_src R
  nonmissing <- complete.cases(x)
  x[nonmissing, ]
  #+end_src

* Vectorized operations

- Avoid writing loops (code is a lot simpler)

#+begin_src R
  x + y # element-wise addition
#+end_src

- Similar for the matrices:

#+begin_src R
  x * y # element-wise multiplication
  x %*% y # true matrix multiplication
#+end_src

* Reading and writing data

- =read.table=, for reading tabular data
  Important arguments:
  + =file=,
  + =header=,
  + =sep= (defaults to the *space*)
  + =colClasses=, class of each column
  + =nrows=,
  + =comment.char=,
  + =skip=, number of lines to skip from the beginning
  + =stringsAsFactors= (defaults to =TRUE=)

- =read.csv=, for reading tabular data
  + header defaults to =TRUE=
  + default separator: *comma*

- =readLines=, for reading lines of a text file

- For large datasets:
  + set comment.char = "" if there are no comments in your file
  + use the =colClasses= argument
    Quick and dirty way to figure out the classes of each column

    #+begin_src R
    initial <- read.table("datatable.txt", nrows = 100)
    classes <- sapply(initial, class)
    tabAll <- read.table("datatable.txt", colClasses = classes)
    #+end_src

  + set nrows helps with memory usage

- Textual formats (potentially recoverable in case of corruption)
  + =dput()= :: deparse a single R object
  + =dump()= :: can be used on multiple R objects

- /Connections/ can be made to:
  + =file= (most common)
  + =gzfile=, file compressed with =gzip=
  + =bzfile=, file compressed with =bzip2=
  + =url=

- =file()=
  + =description= is the name of the file
  + =open= is a code (read-only, write, append)

* str() function

- str() :: /compactly/ display the internal *structure* of an object
  + Alternative to =summary()=
  + Give the arguments of functions

- head() :: look at the first 6 rows

- tail() :: look at the last 6 rows

* Datasets

#+begin_src R
library(datasets)
airquality
#+end_src

* Control structures

- Control structures mentioned here are primarily useful for writing
  programs; for command-line interactive work, the =*apply= functions are more
  useful

** If, else

#+begin_src R
if(<condition>) {
    ## do something
} else {
    ## do something else
}
#+end_src

Here, the entire =if/else= construct is all about assigning a value to =y=:

#+begin_src R
y <- if(x > 3) { # `x' must be a scalar here, not a vector
    10
} else {
    0
}
#+end_src

** For

#+begin_src R
for(i in 1:10) { # successive values from a sequence or vector
    ## do something
}

for(letter in x) { # take elements from the vector
    ## do something
}
#+end_src

- seq_along(vector) :: create an integer sequence that's equal to the *length
     of the input vector*

- seq_len(integer) :: create an integer sequence that's as long as the
     integer in input

- nrow(dataset) :: tell the number of rows

- ncol(dataset) :: tell the number of columns

- names(dataset) :: tell the names of each column included in the dataframe

** While

#+begin_src R
while(z >= 3 && z <= 10) { # conditions are always evaluated from left to right
    ## do something
}
#+end_src

** Repeat

- Initiate an infinite loop

#+begin_src R
repeat {
    ## do something
    if(<condition>) {
        break # only way to exit a repeat loop
    }
}
#+end_src

- Better to use a for loop with an hard limit on the number of iterations that
  it's allowed to run

** Break

- Break the iteration of a loop

** Next

- Skip an iteration of a loop

** Return

- Exit an entire function and return a given value

* Writing functions

- Functions are R objects of class =function=

#+begin_src R
f <- function(<arguments>) {
    ## do something
}
#+end_src

- Functions can be *passed as arguments to other functions*

- Functions can be nested, so that you can define a function inside of
  another function (implications: see *lexical scoping*)

- The return value of a function is the last expression in the function body
  to be evaluated

- 3 types of...
  + formal argument
  + local variable
  + free variable

** Arguments

- /Named arguments/ can potentially have /default values/ (useful: not every
  function call makes use of all the formal arguments; some can be /missing/)

- The /formal arguments/ are the arguments included in the function definition

- =formals()= returns a list of all the formal arguments of a function

- Arguments can be matched *positionally* or *by name*

  + When an argument is matched by name, it is "taken out" of the argument
    list and the remaining unnamed arguments are matched in the order that
    they are listed in the function definition

- Named arguments help when:

  + you want to use the defaults for evererything except for an argument near
    the end of the list

  + you can't remember the position of the argument

- Function arguments can also be partially /matched/
  1. Check for an exact match
  2. Check for a partial match
  3. Check for a positional match

- When defining a fucntion, you can also set an argument value to =NULL= (there
  is nothing there)

- Arguments to functions are evaluated /lazily/ (only when needed to be
  evaluated

- The =...= argument indicates a variable number of arguments

  + Used when extending a function and you don't want to copy the entire
    argument list of the original function

  + Used by generic functions (such as =mean=) so that extra arguments can be
    passed to methods

  + Used when the number of arguments cannot be known in advance (see =paste=
    function)

  + Any argument that appears /after/ the =...= must be named explicitly and
    cannot be partially matched

** Scoping rules for R

- R searches through the /search list/ (a series of =environments=, an environment
  being a collection of symbol/value pairs) to bind the appropriate value to a
  symbol:

  + Search the global environment =.GlobalEnv= (always the first)

  + Search the namespaces of each of the packages on the search list

    #+begin_src R
    search() # find the search list
    #+end_src

  + Search the =base= package (always the last element)

- Last loaded package gets put in position 2 of the search list and
  everything else gets shifted

- Separate namespaces for functions and non-function objects

- R uses *lexical* (or /static/) *scoping* (instead of /dynamic scoping/): /the value
  of free variables are searched for in the environment in which the function/
  /was/ *defined* (until the empty environment, after the =base= package)

  + With *dynamic* scoping, the value of free variables is looked up in the
    environment from which the function was *called* (/calling environment/ =
    /parent frame/) -- see slide 24 of "Scoping Rules for R" for a comparative
    example

  + Other languages that support lexical scoping: Scheme, Perl, Python,
    Common Lisp

  + Consequences: all objects must be stored in memory, and all functions
    must carry a *pointer to their respective defining environment*

- Every environment has one parent environment (next thing down on the search
  list); it is possible for an environment to have mulitple "children"

- A function + an environment = a (/function/) /closure/

- In R (unlike C), you can have functions defined /inside other functions/ -- in
  this case, the environment in which a function is defined is the body of
  another function!

  #+begin_src R
  make.power <- function(n) { # "constructor" function
      pow <- function(x) {
          x^n # n is a free variable (not defined inside pow)
      }
      pow # return function as return value
  }
  #+end_src

  This function returns another function as its value

  #+begin_src R
  cube <- make.power(3)
  square <- make.power(2)
  #+end_src

- Functions:
  + environment(f) ::
  + parent.env(environment) :: next thing down on the search list
  + ls(environment) :: list all the variabls in the environment
  + get(object, environment) :: get the value of an object inside an
       environment

* Application: optimization

- Routines:
  + optim() ::
  + nlm() ::
  + optimize() ::

- Most of those functions in R attempt to /minimize/ functions by default; so,
  when you write your *objective* function, if they're designed to be maximized,
  then you have to take the negative of those functions so that you can
  minimize them

- Standard deviation =rnorm=
  + number of observations, =n=
  + mean, =mu=
  + standard deviation, =sigma=

* Plotting

** Mathematical annotations

- Produce LaTeX-like symbols onto your plots (relevant to both the =base=
  plotting and the =lattice= plotting system)

- Math symbols are expressions in R, so you have to use the =expression=
  function to encode them when you use them in a plot

- List of allowed symbols

  #+begin_src R
  ?plotmath
  #+end_src

- Plotting functions that take arguments for text (title, axis, text, labels,
  ...) generally allow expressions for math symbols

  #+begin_src R
  plot(0, 0, main = expression(theta == 0),
       ylab = expression(hat(gamma) == 0),
       xlab = expression(sum(x[i] * y[i], i == 1, n))
  #+end_src

- Paste strings together

  #+begin_src R
  expression("The mean " * bar(x) * " is " * ...)
  #+end_src

- Use a computed value in the annotation

  #+begin_src R
  xlab=substitute(bar(x) == k, list(k=mean(x))) # substitute k
  #+end_src

** Plotting and Color

- Proper use of color can help to describe the relationships that you're
  trying to demonstrate

- =colors()= lists the names of colors you can use

- =grDevices= package has functions which *take a palette of colors* and help to
  interpolate between the colors

  + =colorRamp()= :: return a function that takes *values between 0 and 1* and
                   interpolates between the extremes of the color palette

    #+begin_src R
    pal <- colorRamp(c("red", "blue")) # return a function `pal'
    pal(0)
    pal(0.5)
    pal(1)
    pal(seq(0, 1, len = 10)) # sequence between 0 and 1 -> sequence of colors
    #+end_src

  + =colorRampPalette()= :: return a function that takes *integer arguments* and
       return a (character) vector of hexadecimal colors interpolating the
       palette

    #+begin_src R
    pal <- colorRampPalette(c("red", "yellow")) # return a function `pal'
    pal(2) # return 2 colors
    pal(10) # return 10 colors
    #+end_src

- =RColorBrewer= package contains interesting color palettes of 3 types:

  #+begin_src R
  library(RColorBrewer)
  cols <- brewer.pal(3, "BuGn") # 3 (primary) colors from the "blue/green" palette
  pal <- colorRampPalette(cols)
  image(volcano, col = pal(20)) # 20 different colors
  #+end_src

  + *Sequential*, used for (numerical) data that are *ordered* from low to high

  + *Qualitative*, used for data that are *not ordered* (factors or categorical
    data which just have different values)

  + *Diverging*, used for data that *deviate* from something (for example, the
    deviation from the mean)

  + Used by =smoothScatter=, useful if you have to make a scatterplot of a lot
    of different points, and want to see high-density regions of the plot.

- Alternative to =smoothScatter=: use *scatterplot with transparency* to clarify
  plots with many points
  + rgb() :: produce any color via red, green and blue proportions
    * Color *transparency* can be added via the =alpha= (4^{th}) parameter

  #+begin_src R
  plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19)
  #+end_src

- =colorspace= package can be used for a different control over colors

* Baltimore Homicide Dataset

http://data.baltimoresun.com/homicides/

* Classes and methods

- R is both interactive /and/ has a system for object orientation (OO)

- The code for implementing S4 classes/methods is in the =methods= package
  (usually loaded by default)

- A /class/ (defined using =setClass()=)is a description of a thing (= new data
  type); you can customize the methods for that class (output of =print=, =str=,
  =summary=, =plot=, ...)

- An /object/ (created using =new()=) is an instance of a class

- A /method/ is a function that only operates on a certain class of objects

- A generic function is an R function which dispatches methods; it does not
  actually do any computation

  The first argument for any generic function is an object of a particular
  class.

  1. Search for a method designed just for that class
  2. Search for a default method
  3. Throw an error

  You should *never* call methods directly. Rather, use (the abstraction of) the
  generic function and let the method be dispatched automatically.

- A /method/ is the implementation of a generic function for an object of a
  particular class

  #+begin_src R
  methods("mean")
  #+end_src

- S4 equivalent of (S3 generic) =print= function is =show=

- showMethods() :: List the different methods for a generic function

- getMethod() :: Obtain the code (function body) of an S4 method

- Extend the R system:
  + Write a method for a new class but for an existing generic function
  + Write a new generic functions and new methods

- Why would you want to create a new class?
  + To represent new types of data
  + New concepts/ideas
  + To abstract/hide implementation details from the user

- Create a new class using the =setClass= function
  + name
  + data elements (/slots/)

- Create a method for this class with the =setMethod= function
  + name of the generic name function (=plot=, ...)
  + signature (= classes of objects accepted by this method)

- showClass :: Obtain information about a class definition

* Question

** Question 5

#+begin_src R
data <- read.csv("ss06hid.csv")
ok <- complete.cases(data$ACR,data$AGS)
okdata <- data[ok,]
okdata[okdata$BDS==3 & okdata$RMS==4,2]
#+end_src

** Question 7

Create a logical vector that identifies the households on greater than 10
acres who sold more than $10,000 worth of agriculture products. Assign that
logical vector to the variable agricultureLogical. Apply the which() function
like this to identify the rows of the data frame where the logical vector is
TRUE and assign it to the variable indexes.

#+begin_src R
indexes =  which(agricultureLogical)
#+end_src

If your data frame for the complete data is called dataFrame you can create a
data frame with only the above subset with the command:

#+begin_src R
subsetDataFrame  = dataFrame[indexes,]
#+end_src

Note that we are subsetting this way because the NA values in the variables
will cause problems if you subset directly with the logical statement.
