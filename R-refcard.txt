#+TITLE:     R quick reference card
#+AUTHOR:    Fabrice Niessen
#+EMAIL:     (concat "fniessen" at-sign "pirilampo.org")
#+Time-stamp: <2013-11-27 Wed 12:17>
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:2

#+PROPERTY:  eval no
#+PROPERTY:  exports both
#+SETUPFILE: ~/src/org-style/bigblow-local-abs.setup

rank()

* R reference card

Welcome to R reference card. It contains the reference documentation that
describes how to perform *data analysis* using R.

* Emacs key bindings

** References

See
- http://ess.r-project.org/refcard.pdf
- http://www.damtp.cam.ac.uk/user/sje30/ess11/ess-slides.pdf

** Interacting with the ESS process

- =C-c C-z= ::
     Jump back to script buffer.

** Sending code to the ESS process

Primary process interaction commands:

- =C-RET= ::
     Send the current *region or line* to the ESS process and *step* to the next
     line of code.

- =C-M-x= ::
     Send the current *region or function or paragraph* to the ESS process.

- =C-c C-c= ::
     Send the current *region or function or paragraph* to the ESS process and
     *step* to the next line of code.

Ohter evaluation commands:

- =C-c C-n= ::
     Send the current *line* to the ESS process and *step* to the next line of
     code.

- =C-c C-r= ::
     Send the current *region* to the ESS process.

- =C-c C-f= ::
     Send the current *function* to the ESS process.

- =C-c C-p= ::
     Send the current *paragraph* (defined as continuous set of lines surrounded
     by a blank line at top and bottom) to the ESS process.

- =C-c C-b= ::
     Send the current *buffer* to the ESS process.

** Editing objects and functions

- =C-c C-e C-d= ::
     *Edit* the code of an *object*.

- =C-c C-l= ::
     Load a file into the ESS process using =source()=.

** Help

Help at your fingertips:

- =C-c C-d C-e= ::
     Describe object at point (press =C-e= to cycle).

- =C-c C-d C-a= ::
     ess-display-help-apropos

- =C-c C-d C-d= ::
     ess-display-help-on-object

- =C-c C-d C-v= ::
     ess-display-vignettes

- =C-c C-d C-w= ::
     ess-help-web-search

- =C-c C-d i= ::
     ess-display-package-index

- =C-c C-d o= ::
     ess-display-demos

** Reading help files

- =C-c C-v= ::
     Display *R help* on an object (which has an help file) *in Emacs*, for example
     for the function call you're currently writing.

Then:

- =l= ::
     *Run example* in R help page, *line by line*.

** Completion

*** Completion of function arguments

*ElDoc* support: automatic display of function arguments in the *echo area*.

*** Integration with auto-complete package

Auto-completion of objects and arguments:
http://www.emacswiki.org/emacs/ESSAuto-complete.

** Developing with ESS

*** ESS tracebug

Tracebug highlighting of errors.

**** Breakpoints

- =C-c C-t C-b= ::
     Set breakpoint.

- =C-c C-t B= ::
     Set conditional breakpoint.

- =C-c C-t k= ::
     Kill breakpoint.

**** General debugging

- =C-c `= ::
     Show R traceback (display source locations).

- =C-c ~= ::
     Show call stack (display source locations).

- =C-c C-t C-e= ::
     Toggle error action (repeat to cycle).

- =C-c C-t C-d= ::
     Flag for debugging.

- =C-c C-t C-u= ::
     Unflag for debugging.

- =C-c C-t C-w= ::
     Use "ess-watch" while debugging to see variables change at each step, or
     even just at the prompt.

**** Navigation to errors

- =M-g n= ::
     Next error.

- =M-g p= ::
     Previous error.

**** Tracebug visual debugger

*** ESS developer

- =C-c C-t C-a= ::
     Add a package to your development list.

- =C-c C-t C-t= ::
     Toggle developer mode on and off.

- =C-c C-t l= ::
     ess-developer-load-package (this one is in ESS dev as yet)

** Emacs general functionality

M-r from comint buffers is worth a wealth IMO.

I would add C-s and C-r to search in the help buffer and M-\ to indent

3) probably the most used command of mine is imenu-anywhere.

   (global-set-key (kbd "C-.") 'imenu-anywhere)

and you will be able to navigate to the definition of the symbol at
point as long as the other file is open. This is like tag navigation but
more convenient IMO. Both ido and helm interfaces are available.

6) multiple processes. I think ESS handling of multiple processes is
pretty unique. Even in emacs realm you don't see this that often.

   C-c C-s ess-switch-process

Other nice tools ( probably not available in other editors):

   C-c C-q + M-x R to quickly restart the process.

   C-c .     	ess-set-style (different indentation under your fingertips)

   C-c C-e i 	ess-install-library
   C-c C-e l 	ess-load-library

   C-c C-e C-t	ess-build-tags-for-directory (then use M-. to jump to definition)
   C-c C-e C-w	ess-execute-screen-options

Also the ability to mix in other, general purpose Emacs tools:

paredit-mode to give me good shortcuts to navigate around and manipulate
parentheses and braces,
git-gutter-mode to keep tabs on lines I've changed in a file.
M-/ to complete long words the second type I type them.

1. INDENTATION.
3. Navigation & execution of code, follow to *R* buffer
4. In-session function editing. C-c C-e d and C-c C-e C-d can open file
versions of R functions. C-c C-e l sends same back.

* 0. Overview of R

R system that you download from [[http://cran.r-project.org/][CRAN]]:
- =base= package
- Familiar packages (=utils=, =datasets=, ...)
- Recommended packages (=lattice=, ...)
- 4,000 other packages

[[http://cran.r-project.org/doc/contrib/Short-refcard.pdf][R Reference Card]]

Some [[http://cran.r-project.org/manuals.html][R manuals]]:
- [[http://cran.r-project.org/doc/manuals/R-intro.html][An introduction to R]]
- [[http://cran.r-project.org/doc/manuals/r-release/R-data.html][R data import/export]]
- [[http://cran.r-project.org/doc/manuals/R-exts.html][Writing R extensions]]

* 1. Getting started and getting help

#+begin_src R
?function
?dataset
package ? lattice
library(help=lattice)
#+end_src

- =args(function)= ::
     Look at the arguments of a FUNCTION.

- Google
- [[mailto:r-help@r-project.org][R general mailing list]]
- [[http://stackoverflow.com/questions/tagged/r][Stack Overflow]]

* 2. Some basics

** Print something

- =print(object)= ::
     Explicitly print out an object.

- =cat()= ::
     Concatenate together a set of strings and prints out the concatanated
     string (to a file or to the console).

** Setting variables

- =<-= ::
     Assign a value to a variable.

** Listing variables

- =ls()=, =ls.str()= ::
     Show objects in my workspace.

** Deleting variables

- =rm()= ::
     Remove objects from your workspace.

     #+begin_src R
     rm(list=ls())                      # remove everything from the workspace
     #+end_src

** Computing basic statistics

- =mean()= ::
     Take the mean.

- =median()= ::
     Take the median.

- =cor()= ::
     Correlation function.

** Creating sequences

- =n:m= ::
     Create an *sequence of* integers from =n= to =m= (=n= < =m= or =n= > =m=).

- =seq(from, to, len)= ::
     Create a *sequence of* =len= equally spaced fractional numbers.

- =rep(x, times)= ::
     Create a series of repeated values.

** Operators

- == ::
     Compare.

- =%in%= ::
     Test membership.

** Defining a function

#+begin_src R
myfunction <- function(x) {
    y <- norm(100)
    mean(y)
}
#+end_src

* 3. Navigating the software

- =library(package)= ::
     Load PACKAGE.

     #+begin_src R
     library(datasets)
     airquality
     #+end_src

- =data(dataset)= ::
     Load DATASET.

- =source("file.R")= ::
     Evaluate R code file.

** Running a batch script

You may write a script containing R code:

#+begin_src sh
#!/usr/bin/env Rscript

argv <- commandArgs(TRUE)
x <- as.numeric(argv[1])

# etc.

png("graph.png", 500, 500)
plot(graph)
graphics.off()
#+end_src

* 5. Data structures

What is data?

- Population ::
     Set of items.

- Variable ::
     Measurement or characteristic.

     + Qualitative ::
          Can be defined by a label and have discrete values.

     + Quantitative ::
          Measured on a numerical scale.

| Class     | Example                     |
|-----------+-----------------------------|
| =logical=   | =TRUE= / =FALSE=                |
| =integer=   | =1L= (with explicit =L= suffix) |
| =numeric=   | =0.5= or =1= (/real/ numbers)     |
| =complex=   | =1+0i=                        |
| =character= | "hello" (= lowest class)    |

- =class()= ::
     Show the class of the object.

- =unclass(vector)= ::
     Strip out the class (see factors).

** Vectors

*Vectors* are sets of elements of the /same class/.

When objects of different classes are mixed in a vector, /coercion/ occurs behind
the scene so that every element is of the same class (the "lowest common
denominator" class).

- =c()= ::
     Create a vector of objects (that is, *concatenate* or combine things
     together).

- =vector(class, length)= ::
     Create an empty vector.

- =names()= ::
     Show or give a name to each *element* of a vector.

- =length()= ::

** Matrices

Matrices are *vectors with 2 dimensions* attached to them (see =dimension=
attribute).

They are constructed /column-wise/ (vector inserted by column).

They can be created from vectors by adding a dimension attribute:

#+begin_src R :eval yes
v <- 1:10
dim(v) <- c(2,5)
print(v)
#+end_src

#+results:
| 1 | 3 | 5 | 7 |  9 |
| 2 | 4 | 6 | 8 | 10 |

They can be created by /column-binding/ or /row-binding/.

- =matrix(nrow=x, ncol=y)= ::
     Create an empty matrix.

- =cbind()= ::
     Column-bind (if the row order matches; otherwise, use =merge=).

- =rbind()= ::
     Row-bind.

** Arrays

Arrays are *n-dimensional matrices*.

- =array()= ::
     Create an array.

** Lists

*Lists* are vectors of objects of possibly different classes.

The indexes of the elements of a list have double brackets around them.

- =list()= ::
     Construct a list.

** Factors

*Factors* are /qualitative/ variables used to represent /categorical/ data, to store
self-describing codes for /labels/ (such as "male" and "female", or "low",
"medium" and "high").

Unordered or ordered.

- =factor(character vector)= ::
     Create a factor variable (with levels by alphabetical order).

- =levels(x)= ::
     Return the value of the levels.

** Data frames

*Data frames* are used to store tabular data where each column can be of a
different class: special type of list (of columns) where every element has the
same length.

- Row = observation, column = variable
- Special attribute =row.names= (every row has a name, or defaults to a
  sequence of integers)
- Most often created by calling =read.table()= or =read.csv()=

- =data.frame()= ::
     Create a data frame.

- =data.matrix()= ::
     Convert a data frame to a /numeric/ matrix (forced *coercion*!).

- =names()= ::
     Tell the names of each *column* included in the data frame.

** Vectorized operations (recycling rule)

Avoid writing loops (code is a lot simpler):

#+begin_src R
x + y                                   # element-wise addition
#+end_src

Similar for the matrices:

#+begin_src R
x * y                                   # element-wise multiplication
x %*% y                                 # true matrix multiplication
#+end_src

** Selecting list elements or data frame columns by position (subsetting)

- =[[= ::
     Extract a *single element* of a list (or a single column of a data frame).

     Can be used with /computed/ indices.

     Can extract nested elements of a list:

     #+begin_src R
     x[[1]][[3]]                        # same as: x[[c(1,3)]]
                                        # third element of the first element
     #+end_src

     Partial matching allowed at the command-line:

     #+begin_src R
     x[["a", exact=FALSE]]              # instead of: x[["aardvark"]]
     #+end_src

- =[= ::
     Return an object of the *same class* as the original: a list of elements (or
     a data frame built from multiple columns).

     Extract multiple elements of a list:

     #+begin_src R
     x[c(1,3)]
     #+end_src

     Remove the first column:

     #+begin_src R
     df[,-1]
     #+end_src

** Selecting list elements or data frame columns by name (subsetting)

- =$= ::
     Extract a single element of a list (or a single column of a data frame)
     *by name*: you don't have to remember where the element is in the list.

     #+begin_src R
     x$bar                              # same as x[["bar"]]
     #+end_src

     Can only be used with literal names.

     Partial matching allowed at the command-line:

     #+begin_src R
     x$a                                # instead of: x$aardvark
     #+end_src

** Selecting data frame columns by position (subsetting)

Matrices can be subsetted with =(row, col)= type indices.

Indices can also be missing:
- =x[i,]= :: Row i.
- =x[,j]= :: Column j.

By default,

- a single element is retrieved as a vector of length 1 rather than a 1x1
  matrix.

- a single column or a single row is retrieved as a vector, not as a matrix.

This can be turned off by setting =drop = FALSE= (don't drop the dimension).

* Control structures

Control structures mentioned here are primarily useful for writing programs.
For command-line interactive work, the =*apply= functions are more useful.

** Conditional statements

#+begin_src R
if (<condition>) {
    ## do something
} else {
    ## do something else
}
#+end_src

Here, the entire =if/else= construct is all about assigning a value to =y=:

#+begin_src R
y <- if(x > 3) {                        # x must be a scalar here, not a vector
    10
} else {
    0
}
#+end_src

** Loops

#+begin_src R
for (i in 1:10) {                       # successive values from a sequence or vector
    ## do something
}

for (letter in x) {                     # take elements from the vector
    ## do something
}
#+end_src

- seq_along(vector) ::
     Create an integer sequence that's equal to the *length of the input vector*.

- seq_len(integer) ::
     Create an integer sequence that's as long as the integer in input.

- nrow(dataset) ::
     Tell the number of rows.

- ncol(dataset) ::
     Tell the number of columns.

#+begin_src R
while (z >= 3 && z <= 10) {             # conditions are always evaluated from left to right
    ## do something
}
#+end_src

Initiate an infinite loop:

#+begin_src R
repeat {
    ## do something
    if(<condition>) {
        break                           # only way to exit a repeat loop
    }
}
#+end_src

- =break= ::
     Break the iteration of a loop.

- =next= ::
     Skip an iteration of a loop.

- =return= ::
     Exit an entire function and return a given value.

Better to use a =for= loop with an hard limit on the number of iterations that
it's allowed to run.

* Writing functions

- Functions are R objects of class =function=

#+begin_src R
f <- function(<arguments>) {
    ## do something
}
#+end_src

- Functions can be *passed as arguments to other functions*

- Functions can be nested, so that you can define a function inside of
  another function (implications: see *lexical scoping*)

- The return value of a function is the last expression in the function body
  to be evaluated

- 3 types of...
  + formal argument
  + local variable
  + free variable

** Arguments

- /Named arguments/ can potentially have /default values/ (useful: not every
  function call makes use of all the formal arguments; some can be /missing/)

- The /formal arguments/ are the arguments included in the function definition

- =formals()= returns a list of all the formal arguments of a function

- Arguments can be matched *positionally* or *by name*

  + When an argument is matched by name, it is "taken out" of the argument
    list and the remaining unnamed arguments are matched in the order that
    they are listed in the function definition

- Named arguments help when:

  + you want to use the defaults for evererything except for an argument near
    the end of the list

  + you can't remember the position of the argument

- Function arguments can also be partially /matched/
  1. Check for an exact match
  2. Check for a partial match
  3. Check for a positional match

- When defining a function, you can also set an argument value to =NULL= (there
  is nothing there)

- Arguments to functions are evaluated /lazily/ (only when needed to be
  evaluated

- The =...= argument indicates a variable number of arguments

  + Used when extending a function and you don't want to copy the entire
    argument list of the original function

  + Used by generic functions (such as =mean=) so that extra arguments can be
    passed to methods

  + Used when the number of arguments cannot be known in advance (see =paste=
    function)

  + Any argument that appears /after/ the =...= must be named explicitly and
    cannot be partially matched

** Scoping rules for R

- R searches through the /search list/ (a series of =environments=, an environment
  being a collection of symbol/value pairs) to bind the appropriate value to a
  symbol:

  + Search the global environment =.GlobalEnv= (always the first)

  + Search the namespaces of each of the packages on the search list

    #+begin_src R
    search()                            # find the search list
    #+end_src

  + Search the =base= package (always the last element)

- Last loaded package gets put in position 2 of the search list and
  everything else gets shifted

- Separate namespaces for functions and non-function objects

- R uses *lexical* (or /static/) *scoping* (instead of /dynamic scoping/): /the value
  of free variables are searched for in the environment in which the function/
  /was/ *defined* (until the empty environment, after the =base= package)

  + With *dynamic* scoping, the value of free variables is looked up in the
    environment from which the function was *called* (/calling environment/ =
    /parent frame/) -- see slide 24 of "Scoping Rules for R" for a comparative
    example

  + Other languages that support lexical scoping: Scheme, Perl, Python,
    Common Lisp

  + Consequences: all objects must be stored in memory, and all functions
    must carry a *pointer to their respective defining environment*

- Every environment has one parent environment (next thing down on the search
  list); it is possible for an environment to have mulitple "children"

- A function + an environment = a (/function/) /closure/

- In R (unlike C), you can have functions defined /inside other functions/ -- in
  this case, the environment in which a function is defined is the body of
  another function!

  #+begin_src R
  make.power <- function(n) {           # "constructor" function
      pow <- function(x) {
          x^n                           # n is a free variable (not defined
                                        # inside pow)
      }
      pow                               # return function as return value
  }
  #+end_src

  This function returns another function as its value

  #+begin_src R
  cube <- make.power(3)
  square <- make.power(2)
  #+end_src

- Functions:
  + environment(f) ::
  + parent.env(environment) :: next thing down on the search list
  + ls(environment) :: list all the variables in the environment
  + get(object, environment) :: get the value of an object inside an
       environment

* 4. Input and output

Types of files:
- Tab-delimited
- CSV
- Excel
- JSON
- HTML/XML
- Database

** Getting the current working directory

- =getwd()= ::
     Figure out what your *working directory* is.

** Creating, opening and closing connections

- =file()= ::
     + =description= is the name of the file
     + =open= is a code (read-only, write, append)

     #+begin_src R
     con <- file("./data/cameras.csv", "r")
     cameraData <- read.csv(con)
     close(con)
     #+end_src

** Reading tabular data files

- =read.table(file)= ::
     Read tabular data file, create data frame.

     Important arguments:
     + =file=
     + =header=
     + =sep= (defaults to the *space*)
     + =quote=
     + =colClasses= (class of each column, also used to *skip columns*)
     + =nrows=
     + =skip= (number of lines to skip from the beginning)
     + =comment.char=
     + =stringsAsFactors= (defaults to =TRUE=)

     #+begin_src R
     data <- read.table("./data/file.txt", header=T, sep="\t", quote="")
     #+end_src

For *large datasets*:

- Set =comment.char= = "" if there are no comments in your file.

- Use the =colClasses= argument.

  Quick and dirty way to figure out the classes of each column (if there aren't
  any classes that you want to change from their defaults): read in the first
  rows, /determine the classes from that/, and then import the rest of the file.

  #+begin_src R
  tabSample <- read.table("datatable.txt", nrows=100)
  classes <- sapply(tabSample, class)
  tabAll <- read.table("datatable.txt", colClasses=classes)
                                        # save time on importing data
  #+end_src

- Set =nrows= helps with memory usage.

R equivalent of Linux =cut= (to read only certain columns from a file):

#+begin_src R
whichCols <- rep("NULL", 28)            # assuming 28 colums
whichCols[c(1,5,28)] <- NA
df <- read.table(file, colClasses=whichCols)
#+end_src

To call some shell script to do the column extraction and then using
=read.table= on its output:

#+begin_src R
df <- read.table(pipe("cut -f1,5,28 myFile.txt"))
#+end_src

** Writing tabular data files

- =write.table()= ::
     Write data.

** Reading from CSV files

- =read.csv(file)= ::
     Read data from CSV file, create data frame.
     + =header= (defaults to =TRUE=)
     + =separator= (defaults to *comma*)

     #+begin_src R
     data <- read.csv("./data/file.csv")

     read.csv(file.choose())            # pick a file
     #+end_src

     It calls =read.table= with some default values. To look at them, just look
     at the code of =read.csv= by typing =read.csv= and hitting <enter> at your R
     command line).

- =read.csv2(file)= ::
     Read data from CSV file, create data frame.
     + =header= (defaults to =TRUE=)
     + =separator= (defaults to =;=)

** Reading from Excel files

- =read.xlsx()=, =read.xlsx2()= ::
     Read Excel files.

** Reading files from the Internet

- =download.file()= ::
     Download a file from the Internet.

     Be sure to record when you downloaded.

     #+begin_src R
     fileUrl <- "http://..."
     download.file(fileUrl, destfile="./data/file.csv", method="curl")
     #+end_src

** Reading files with a complex structure

- =readLines()= ::
     Read lines of text from a connection.

     /Connections/ can be made to:
     - =file= (most common)
     - =gzfile=, file compressed with =gzip=
     - =bzfile=, file compressed with =bzip2=
     - =url=

     *Remember to close connections*.

     #+begin_src R
     con <- url("http://scholar.google.com/citations")
     htmlCode <- readLines(con)
     close(con)

     # get data off webpages
     html3 <- htmlTreeParse("...")

     # find value of title tag
     xpathSApply(html3, "//title", xmlValue)

     # access parts of the table
     xpathSApply(html3, "//td[@id='col-citedby']", xmlValue)
     #+end_src

** Reading from SQL Server databases

#+begin_src R
library(RODBC)
## con <- odbcConnect("DSN", uid="username")
## con <- odbcDriverConnect("driver={SQL Server};server=hostname;database=dbname;trusted_connection=true")
con <- odbcDriverConnect("driver={SQL Server};server=hostname;database=dbname;uid=username;pwd=password")
sql <- "SELECT * FROM table"
rows <- sqlQuery(con, sql)
print(head(rows))
odbcClose(con)
#+end_src

** Saving and transporting objects

Textual formats (potentially recoverable in case of corruption).

- =dput()= ::
     Deparse a single R object.

- =dump()= ::
     Can be used on multiple R objects.

** Further resources

Packages:

- =httr= ::
     For working with HTTP connections.

- =RMySQL= ::
     For interfacing with mySQL.

- =bigmemory= ::
     For handling data larger than RAM.

- =foreign= ::
     For getting data into R from SAS, SPSS, Octave, etc.

* 12. Useful tricks

** Peeking at your data

- =head()= ::
     Look at the first 6 rows.

- =tail()= ::
     Look at the last 6 rows.

- =str()= ::
     /Compactly/ display the internal *structure* (*classes*, etc.) of an object.

     Alternative to =summary()=.

     When applied to functions, show the *arguments*.

     #+begin_src R
     str(.Platform)                     # what is the operating system
     #+end_src

- =attributes()= ::
     Access (set or modify) the (list of) attributes of an object.

* 9. General statistics

** Summarizing your data

- =range()= ::
     Give the min and the max (vector of length 2) of the observations (vector
     of numbers).

- =summary()= ::
     Produce a summary of the object.

** Tabulating factors

- =table(f)= ::
     *Count* the number of observations in each /level/ (only works on /factors/).
     Give a *frequency* of how many levels there are.

     #+begin_src R
     unique(dfrm$f)
     length(unique(dfrm$f))             # how many unique values

     table(dfrm$f, useNA="ifany")       # number of times each unique value appears
                                        # (show missing values as well)
     #+end_src

     Relative frequencies:

     #+begin_src R
     tbl <- table(dfrm$f, useNA="ifany")
     tbl / sum(tbl)
     #+end_src

     Use the =cut= function to calculate tables with /numeric/ values.

     #+begin_src R
     f <- cut(dfrm$x, breaks=30)        # use `labels' to give nice names
     table(f, useNA="ifany")
     #+end_src

- =table(f1, f2)= ::
     Produce a /contingency table/ (cross-tabulation).

     #+begin_src R
     table(dfrm$f1, dfrm$f2)            # look at the relationship between f1 and f2
     #+end_src

** Testing categorical variables for independence

#+begin_src R
summary(table(f1, f2))
#+end_src

Conventionally, a /p/-value of less than 0.05 indicates that the variables are
likely not independent (there is some connection between the variables).

** Calculating quantiles (and quartiles) of a dataset

#+begin_src R
quantile(vec, na.rm=TRUE)
#+end_src

* 6. Data transformations

(Partial list of) munging operations (= key process)
- *These steps must be recorded* in their own R script
- *90% of your effort will often be spent here*

Processed (*tidy*) data:
- Each variable forms a column.
- Each observation forms a row.
- Each table / file stores data about one kind of observation.

** Fixing variable names

#+begin_src R
tolower(names(dfrm))
#+end_src

#+begin_src R
splitNames <- strsplit(names(dfrm),"\\.") # split at period in names
firstElement <- function(x){x[1]}       # select the 1st component of the vector
sapply(splitNames, firstElement)        # remove everything after the trailing dot
#+end_src

#+begin_src R
gsub("_", "", names(dfrm))
#+end_src

** Creating new variables

#+begin_src R
dfrm$ranges <- ranges                   # add a variable to the data frame
#+end_src

** Removing list elements using a condition

*Subsetting* by using 2 types of index:
- a numeric vector (=x[2]=, =x[1:4]=)
- a *logical vector* (=x[x > "a"]=)

Create a logical vector:

#+begin_src R
u <- x > "a"
x[u]                                    # get all elements which are greater than "a"
#+end_src

Remove missing values (=NA=) from a *list*:

#+begin_src R
missing <- is.na(x)                     # logical vector
y <- x[!missing]
sum(y)                                  # = sum(x, na.rm=TRUE)
#+end_src

The analogue of =is.na= for *data frames* is =complete.cases=.

Take all the rows of a data frame where *all the values are not missing*:

#+begin_src R
nonmissing <- complete.cases(x)
x[nonmissing, ]
#+end_src

Take the subset of all objects (=x= and =y=) that has no missing values:

#+begin_src R
bothnonmissing <- complete.cases(x, y)  # logical vector
x[bothnonmissing]
#+end_src

To *drop columns by name* in a data frame, you can use direct indexing (with
booleans vectors) and then, simply reassign data:

#+begin_src R
tokeep <- !names(x) %in% c("remove1", "remove2")
x <- x[,tokeep]                         # or...
x <- x[,tokeep, drop=FALSE]             # you will need this option to avoid
                                        # the conversion to an atomic vector if
                                        # there is only one column left
#+end_src

** Selecting rows and columns more easily

Indexing approach.

#+begin_src R
dfrm[dfrm$var1 > 0 & dfrm$var2 > 0, c(1,2)] # subset on var1 and var2
dfrm[dfrm$var1 > 0 | dfrm$var2 > 0, c(1,2)] # subset on var1 or var2
#+end_src

Using the =subset= function.

#+begin_src R
subset(dfrm, select=c(var1,var2), subset=(var1 > 0 & var2 > 0))
subset(dfrm, select=c(var1,var2), subset=(var1 > 0 | var2 > 0))
#+end_src

Use the =%in%= operator to compare a variable to a list of desired values.

Note that you do /not/ quote the column names.

** Removing rows that contain NAs from a data frame

** Removing columns that contain NAs from a data frame

Get rid of any column that has one or more NAs.

#+begin_src R
df <- df[,colSums(is.na(df))==0]
#+end_src

** Merging data frames by commun column

- =merge(df1, df2, by = "CustomerId")= ::
     *Inner* join.

- =merge(df1, df2, by = "CustomerId", all = TRUE)= ::
     *Full outer* join (all records from both tables).

- =merge(df1, df2, by = "CustomerId", all.x = TRUE)= ::
     *Left* outer join.

- =merge(df1, df2, by = "CustomerId", all.y = TRUE)= ::
     *Right* outer join.

- =merge(df1, df2, by = NULL)= ::
     *Cross* join.

Merge data sets.

#+begin_src R
mergedData <- merge(df1, df2, by.x="id1", by.y="id2", all=TRUE)
#+end_src

** Converting

- =as.*()= ::
     Explicitly coerce from one class to another.

- =as.numeric()= ::
     Coerce the (=character=) column to be =numeric=.

- =as.Date("January 2, 2007", "%B %d, %Y")= ::
     "2007-01-02"

- =as.ts()= ::
     Convert to a time series object.

You can always convert variables between types.

#+begin_src R
dfrm$x <- as.factor(dfrm$x)             # character to factor
dfrm$x <- as.character(dfrm$x)          # factor to character
#+end_src

Warning: To convert factors to numeric or integer, first convert to character.
Converting factors directly to numeric or integer data can lead to unwanted
outcomes. Always check the results of a conversion to make sure R did what you
wanted.

Convert at once all the string columns to factors:

#+begin_src R
ind <- sapply(x, is.character)
x[ind] <- lapply(x[ind], factor)
#+end_src

** Applying a function to each list element

Alternative (to =for= *loops*) to apply a function (or summary statistics).

*** =lapply=

*Loop over a list* and apply a *function* on each element. /Always/ returns a *list*
back (that is, not a simplified result).

- (coerced) list =X=
- function =FUN=
- other arguments you wanna pass to the function =...=

#+begin_src R
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
#+end_src

#+begin_src R
lapply(1:4, runif, min=0, max=10)       # arguments passed through the `...'
#+end_src

Extract the first column of each matrix of a list:

#+begin_src R
lapply(x, function(x) x[,1])
#+end_src

*** =sapply=

Same as =lapply=, but tries to "*simplify*" the result in a much more compact
format (put all the elements into a *vector* or a *matrix* if that is possible,
instead of returning a list).

#+begin_src R
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
#+end_src

Pass =na.rm= argument to =ColMeans= to remove the missing values before calculating
the mean.

#+begin_src R
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
#+end_src

** Splitting a vector into groups

- =split(x, f)= ::
     Take a vector, and *split* it into subpieces (the number of groups
     identified by the levels of a *factor* variable). Always return a *list* (of
     lists?) back.

     + =drop = TRUE= ::
          Don't keep the empty levels of the factor.

     Auxiliary function, used in conjunction with functions like =lapply= or
     =sapply= to apply a function to those individual groups.

     #+begin_src R
     lapply(split(x, f), mean)
     #+end_src

     Like =tapply=, but without applying the summary statistics.

     Splitting a data frame (or other kinds of lists), and apply an /anonymous
     function/:

     #+begin_src R
     s <- split(airquality, airquality$Month) # split according to month
     lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
     #+end_src

** Applying a function to every row/column

- =apply(dfrm, margin, fun, ...)= ::
     Apply a function over the *margins* of an array.

     Often used to apply a function to the rows or columns of a matrix. Very
     useful if you wanna take *summaries* of matrices or higher-dimensional
     arrays (such as array of matrices).

     MARGIN is an integer vector which indicates which margins should be
     "retained":
     - *margin 1* = apply FUN *for each row* (dimension 1): preserve all the rows,
       eliminate all columns, get a vector of the number of rows
     - *margin 2* = *for each column* (dimension 2); first dimension has been
       eliminated

     #+begin_src R
     x <- matrix(rnorm(200), 20, 10)
     apply(x, 2, mean)
     #+end_src

     #+begin_src R
     x <- matrix(rnorm(200), 20, 10)
     apply(x, 1, quantile, probs=c(0.25, 0.75)) # no default value for `probs'
     #+end_src

     Shortcut functions (/much/ faster on large matrices):
     + =rowSums= = =apply(x, 1, sum)=
     + =rowMeans= = =apply(x, 1, mean)=
     + =colSums= = =apply(x, 2, sum)=
     + =colMeans= = =apply(x, 2, mean)=

** Applying a function to groups of data

- =tapply(x, index, fun)= ::
     Short for "*table apply*".
     Apply a *function* over *subsets* of a vector:
     + Splits up a vector into little groups (such as men and women, indicated
       by a *factor*),
     + Applies a function to those groups and
     + Brings the pieces back together.

     Function may be anonymous.

     =Simplify = FALSE= to get back a list (instead of an array).

     =tapply= is one of the most useful commands you'll ever need. For example,
     to calculate statistics of =x= separately for each group identified in the
     variable =f=:

     #+begin_src R
     tapply(x, f, sum, simplify=FALSE)  # = lapply(split(x, f), sum)
     tapply(x, f, mean)                 # = sapply(split(x, f), mean)
     tapply(x, f, length)
     #+end_src

- =interaction(f1, f2)= ::
     Combines all the levels of the first factor with all the levels of the
     second factor.

     You can also use =aggregate= to analyze groups defined by more than one
     categorical variable (e.g., month and year).

** Applying a function to parallel vectors or lists

- =mapply= ::
     Apply a *function* to the elements of *multiple lists* in parallel
     (multivariate version of =lapply=).

     For example, apply a function over 2 lists, where the elements of the
     first list go into one argument of the function, and the elements of the
     second list go into another argument of the function

     *Vectorizing a function* (that doesn't allow for vector arguments).

     #+begin_src R
     mapply(rnorm, 1:3, 1:3, 2)         # fixed standard deviation
     #+end_src

     is the same as

     #+begin_src R
     list(rnorm(1, 1, 2),
          rnorm(2, 2, 2),
          rnorm(3, 3, 2))
     #+end_src

** Checking on and removing inconsistent values

* 7. Strings and dates

** Getting the length of a string

- =nchar()= ::
     Get the length of a string.

** Concatenating strings

- =paste()= ::
     *Concatenate* a set of *strings together* to create one string or a vector of
     strings.

** Regular expressions

For the moment, we assume pattern matching on *ASCII strings*...

Metacharacters:

- =^= ::
     Start of a line (or negation of a character class).

- =$= ::
     End of a line.

- =[]= ::
     Character classes.

- =.= ::
     Any character.

- =|= ::
     Or.

- =()= ::
     Subexpressions (alternatives or "remember" matched text).

- =?= ::
     Optional.

- \ ::
     "Escape" the metacharacter.

- =+= ::
     Any number, including none.

- =*= ::
     Any number, at least one -- it is "greedy" so it always matches the
     /longest/ possible string that satisfies the regular expression.

     The greediness can be turned off with the =?= metacharacter (make the regex
     "lazy"), as in:

     #+begin_src R
     ^s(.*?)s$
     #+end_src

- ={}= ::
     Interval quantifiers (minimum, maximum).

These functions can take vector arguments.

- =grep= ::
     Return the *indices* into the character vector where the regex pattern
     matches (it won't do anything).

     #+begin_src R
     i <- grep("regexp", vector) # get a set of indices
     j <- grep("anotherregexp", vector) # get another set of indices
     setdiff(i, j) # substract j elements from i when they are the same
     setdiff(j, i) # different result
     #+end_src

     Setting =value = TRUE= returns the *actual elements* of the character vector
     that match.

- =grepl= ::
     Return a *logical vector* (=TRUE= / =FALSE=) indicating which element matches
     (used for /subsetting/).

- =regexpr= ::
     Return the indices (integer vector) of the string *where the first match
     begins* and the length of the match.

     If I want to see what the match is, use =substr=:

     #+begin_src R
     regexpr("...", string)
     substr(string, start + length - 1)
     #+end_src

     Useful in conjunction with =regmatches= which extracts the matches in the
     strings without having you to use =substr=.

     #+begin_src R
     r <- regexpr("...", string)
     regmatches(string, r)
     #+end_src

- =gregexpr= ::
     Return *all of the matches* ("global") in a given string.

- =sub= ::
     Replace *the first match* with another string (used to strip out stuff by
     replacing the match with nothing).

- =gsub= ::
     Replace *all of the matches* with another string.

- =regexec= ::
     Give the indices (list) for parenthesized sub-expressions.

     If I want to see what the submatch is:

     #+begin_src R
     r <- regexpr("... (.*) ...", string) # find all the date fields
     m <- regmatches(string, r)         # parse out
     dates <- sapply(m, function (x) x[2]) # extract the 2nd element of each list object
     dates <- as.Date(dates, "%B %d, %Y") # convert to date
     hist(dates, "month", freq=TRUE)    # aggregate the dates by month and give an histogram
     #+end_src

* 8. Probability

* 10. Graphics
  :PROPERTIES:
  :eval:     yes
  :END:

2 systems:

- =base= ::
     Graphics are constructed piecemeal by *different function calls*;
     you can add things one by one:
     - annotate (some of the points in) the plot,
     - put some points on the canvas,
     - draw a title,
     - add some axis labels,
     - add some colors,
     - add a legend.

- =lattice= ::
     Graphics are constructed via a single function call: all options have to
     be specified at once (advantage: that allows R to calculate the necessary
     spacings, margins and font sizes).

Behavior:

- Base graphics functions have a "side effect": they plot data directly to
  the graphics device.

- Lattice graphics functions return an object of the class =trellis= (object
  designed for plotting).

  When you call Lattice functions, even if you don't assign it to a "plot
  object", the result will be *auto-printed* (generate the plot *on the
  graphics device*), so it will look like Lattice functions have a "side
  effect"

You cannot use functions from the base plotting system in a Lattice plot.

** Base graphics

*** Make a plot

- =plot= ::
     Create a *scatter plot* (or another type of plot, depending on the class of
     the object being plotted).

- =barplot= ::
     Create a *bar chart* (analogue of an histogram for categorical data).

- =hist= ::
     Make an *histogram* showing the *distribution* of the numeric vector =x=.

- =boxplot= ::
     Create a box plot of the =y= variable by the grouping variable =x= (usually a
     =factor=).

**** Create a scatter plot

- =plot(x)= ::
     Plot the (numeric) data against the index (=1:N=).

     #+begin_src R :results graphics :file Rplots/base-scatterplot-sort.png
     data(iris)
     plot(sort(iris$Petal.Width),
          main="Distribution of petal widths",
          xlab="Rank", ylab="Width", col=as.integer(iris$Species)+1)
     #+end_src

     #+results:
     [[file:Rplots/base-scatterplot-sort.png]]

- =plot(x, y)= ::
     Create a scatter plot of =x= and =y=.

     #+begin_src R :results graphics :file Rplots/base-scatterplot.png
     data(iris)
     plot(iris$Petal.Length, iris$Petal.Width,
          main="Petals: Length vs Width",
          xlab="Length", ylab="Width", col=as.integer(iris$Species)+1)
     #+end_src

     #+results:
     [[file:Rplots/base-scatterplot.png]]

- =plot(x, y, type = "n")= ::
     Set up the plot window, but don't actually plot the data in there.

     Note that you have =POSIXct= dates in your data frame... XXX

- =plot(dfrm)= ::
     Create *multiple scatter plots* if your data frame contains more than
     2 columns.

     #+begin_src R :results graphics :file Rplots/base-multi-scatterplots.png
     data(iris)
     plot(iris[,1:4], main="Multiple scatter plots",
          col=as.integer(iris$Species)+1)
     #+end_src

     #+results:
     [[file:Rplots/base-multi-scatterplots.png]]

     You can see that length and width appear strongly correlated. You could
     check the correlation between features with the =cor()= function.

     #+begin_src R
     data(iris)
     cor(iris[-5])
     #+end_src

     #+results:
     |                  1 | -0.117569784133002 | 0.871753775886583 |  0.817941126271576 |
     | -0.117569784133002 |                  1 | -0.42844010433054 | -0.366125932536439 |
     |  0.871753775886583 |  -0.42844010433054 |                 1 |  0.962865431402796 |
     |  0.817941126271576 | -0.366125932536439 | 0.962865431402796 |                  1 |

**** =hist=

Histogram (*distribution* of data, *frequency* = exact number).

Generic function: you can call it on different types of data. When you call
=hist= on a =Date= object, it requires an interval ("day" / "week" / "month" /
"year") in order to break it up into sequences.

#+begin_src R :results graphics :file Rplots/base-hist.png
data(iris)
hist(iris$Petal.Length, main="Histogram", col="lightblue") # shape of distribution
#+end_src

#+results:
[[file:Rplots/base-hist.png]]

=breaks= is key: it specifies the number of categories to plot or the breakpoints
for each category.

#+begin_src R :results graphics :file Rplots/base-hist-breaks.png
data(iris)
hist(iris$Petal.Length, breaks=seq(1,7,by=0.1), main="Histogram", col="lightblue")
                                        # much more fine-grained distribution
#+end_src

#+results:
[[file:Rplots/base-hist-breaks.png]]

Can you explain the peculiar pattern? Graphical representations of data are
useful at identifying these sorts of artifacts...

Report where the distribution is centered:

#+begin_src R :results graphics :file Rplots/base-hist-center.png
data(iris)
hist(iris$Petal.Length, breaks=100, main="Histogram", col="lightblue")
meanValue <- mean(iris$Petal.Length)
lines(rep(meanValue,100), seq(0,100,length=100), col="red", lwd=5)
#+end_src

#+results:
[[file:Rplots/base-hist-center.png]]


#+begin_src R :results graphics :file Rplots/base-plot-table.png
data(iris)
plot(table(iris$Petal.Length), main="Table", col="blue")
#+end_src

#+results:
[[file:Rplots/base-plot-table.png]]

Note -- In the table plot, x values with one occurrence (out of thousands)
would be visible as one dot in the graphics. They don't in the histogram (as
the line, being too small, would be on the x-axis itself).

- Density plot (smoother histogram)

  *Density* = percentage of observations

  #+begin_src R
  dens <- density(data$var) # smooth density function
  plot(dens,lwd=3,col="blue")
# or: lines(dens,lwd=3,col="blue") after hist plot
  #+end_src

  #+results:

  Easy to compare multiple distributions:

  #+begin_src R
  # add another density
  densMales <- density(data$var[which(data$sex==1)])
  lines(densMales,lwd=3,col="orange")
  #+end_src

  #+results:

**** =boxplot=

=boxplot= draws plot summarizing:

- Median (wide line)

- Quartiles (Q1, Q3)

- Lowest data still within 1.5 * IQR (= Q3 - Q1) of the lower quartile, and the
  highest datum still within 1.5 * IQR of the upper quartile

- Outliers --- By default, observations more than 1.5 * IQR distant from
  nearest quartile

#+begin_src R :results graphics :file Rplots/base-boxplot.png
data(iris)
boxplot(iris[,1:4], col=rainbow(4), main="Boxplot", ylab="Appropriate units")
#+end_src

#+results:
[[file:Rplots/base-boxplot.png]]

*** Add to an existing plot

- =points= ::
     *Add points to a plot* (=col= for boundary color, =bg= for fill color, =pch= for
     plotting character).

     Plot points *in groups separately*.

     #+begin_src R :results graphics :file Rplots/base-points-distinguished.png
     data(iris)
     attach(iris)
     plot(Petal.Length, Petal.Width, type="n")
     points(Petal.Length[Species == "setosa"], Petal.Width[Species == "setosa"], col="red")
     points(Petal.Length[Species == "versicolor"], Petal.Width[Species == "versicolor"], col="green", pch=19)
     points(Petal.Length[Species == "virginica"], Petal.Width[Species == "virginica"], col="blue", pch=18)
     #+end_src

     #+results:
     [[file:Rplots/base-points-distinguished.png]]

     #+begin_src R :results graphics :file Rplots/base-points-distinguished-col.png
     data(iris)
     plot(iris$Petal.Length, iris$Petal.Width, col=as.integer(iris$Species)+1)
     #+end_src

     #+results:
     [[file:Rplots/base-points-distinguished-col.png]]

     #+begin_src R :results graphics :file Rplots/base-points-distinguished-col-unclass.png
     data(iris)
     plot(iris[,3:4], col=c("red","green","blue")[unclass(iris$Species)])
     #+end_src

     #+results:
     [[file:Rplots/base-points-distinguished-col-unclass.png]]

- =lines= ::
     *Add lines* (connect all the dots) *to a plot*.

     #+begin_src R :eval no
     lines(x, y)                        # all lines
     #+end_src

     Even better: option type="b" to plot method for /both/ *points and lines*.

- =abline= ::
     Add a straight line.

     Plot the *regression line* of a scatter plot.

     #+begin_src R :results graphics :file Rplots/base-abline.png
     data(iris)
     attach(iris)
     plot(Petal.Length, Petal.Width)
     fit <- lm(Petal.Width ~ Petal.Length)
     abline(fit, lwd=3, col="blue")
     #+end_src

     #+results:
     [[file:Rplots/base-abline.png]]


- =text= ::
     Add text labels (inside the plot region).

     Could be used to label datapoints.

     #+begin_src R :eval no
     text(-2, 2, "Label")
     #+end_src

- =title= ::
     Add a title (or axis labels, subtitle, ...).

     #+begin_src R :eval no
     title("plot")
     plot(x, y, xlab="Weight", ylab="Height", main="Scatterplot")
     #+end_src

- =mtext= ::
     Add text to the margins.

     #+begin_src R :eval no
     mtext("Label on the X-axis", side=2, line=3, col="blue")
     #+end_src

     Can be used to add multiline legends.

- =axis= ::
     *Annotate the axis* (tick marks, labels).

     #+begin_src R :eval no
     axis(side=2, col="blue", col.axis="blue", las=1)
     #+end_src

- =legend= ::
     Add a legend.

     #+begin_src R :eval no
     legend("topleft", legend="Data", pch=1)
     #+end_src

*** Changing graphical parameters

- =par()= ::
     control *all the graphing parameters* that you can specify (/defaults/ for all
     plots in a session, which can be overridden as arguments to specific
     plotting functions).

     + =pch= ::
          *Plotting character* (default: open circle symbol).

     + =lty= ::
          Line type (default: =solid= line).

     + =lwd= ::
          Line width.

     + =col= ::
          Plotting color.

     + =las= ::
          Orientation of the axis labels on the plot (=las=2= will set the tick
          *labels* to be *perpendicular* to the axis).

     + =bg= ::
          Background color (default: =transparent=).

     + =mar= ::
          Margin size (vector of 4 numbers, 1 per side).

          #+begin_src R :eval no
          par(mar=c(2,2,1,1))
          #+end_src

     + =oma= ::
          Outer margin size (relevant if you have more than one plot per
          canvas).

     + =mfrow= ::
          Number of *plots per row and per column* on the canvas (filled
          row-wise).

          #+begin_src R :eval no
          par(mfrow=c(2,1))           # 2 rows and 1 column
          plot(x, y)
          plot(x, z)
          #+end_src

     + =mfcol= ::
          Number of plots per row and per column on the canvas (filled
          column-wise).

     + =bty= ::
          Type of "box" which is drawn around plots.

          A value of ="n"= suppresses the box (same as =axes=FALSE=).

     Look at the defaults:

     #+begin_src R :eval no
     par("lty")
     #+end_src

- =?Devices= ::
     List graphical devices.

     + =pdf= ::
          Vector format (very, very large for a graphic with *2 million points*
          on it: specify information for every single object on the plot).

     + =png= ::
          Bitmapped format (specify information for pixels), losless
          *compression*, but *does not resize well*.

     + =jpeg= ::
          Lossy compression.

     + =bitmap= ::
          If you're running R in a batch mode (you can't use the =png= and =jpeg=
          functions).

- Copy the plot to another device
  + =dev.copy2pdf= :: copy a plot to PDF

** Lattice graphics

** ggplot2

See post of Antoine Lizée in
http://stackoverflow.com/questions/5234117/how-to-drop-columns-by-name-in-a-data-frame
for an excellent performance reporting.

** Other graphics

*** Pareto diagrams

#+begin_src R :results graphics :file Rplots/qcc-pareto.png
library(qcc)
data(iris)
pareto.chart(table(iris[iris$Species=="setosa",]$Petal.Length))
#+end_src

#+results:
[[file:Rplots/qcc-pareto.png]]

* 11. Linear regression and ANOVA

https://www.zoology.ubc.ca/~schluter/R/fit-model/

** Regression tree models

- arbres de régression : la variable expliquée est de type numérique et il
  s'agit de prédire une valeur la plus proche possible de la vraie valeur.

http://www.statmethods.net/advstats/cart.html

** Classification tree models

- arbres de classification : la variable expliquée est de type nominale
  (facteur). A chaque étape du partitionnement, on cherche à réduire l'impureté
  totale des deux noeuds fils par rapport au noeud père.

#+begin_src R
rpart
#+end_src
